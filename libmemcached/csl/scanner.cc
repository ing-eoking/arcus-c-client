#line 1 "libmemcached/csl/scanner.cc"

#include <libmemcached/csl/common.h>
#include <libmemcached/csl/context.h>
#include <libmemcached/csl/parser.h>
#include <libmemcached/csl/symbol.h>

#ifndef __INTEL_COMPILER
#pragma GCC diagnostic ignored "-Wold-style-cast"
#pragma GCC diagnostic ignored "-Wsign-compare"
#pragma GCC diagnostic ignored "-Wunused-parameter"
#endif

#define YY_NO_INPUT

#define YY_EXTRA_TYPE Context*

#line 18 "libmemcached/csl/scanner.cc"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

/* %not-for-header */
/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */
/* %ok-for-header */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* %if-c++-only */
/* %endif */

/* %if-c-only */
#ifdef yy_create_buffer
#define config__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer config__create_buffer
#endif

#ifdef yy_delete_buffer
#define config__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer config__delete_buffer
#endif

#ifdef yy_scan_buffer
#define config__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer config__scan_buffer
#endif

#ifdef yy_scan_string
#define config__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string config__scan_string
#endif

#ifdef yy_scan_bytes
#define config__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes config__scan_bytes
#endif

#ifdef yy_init_buffer
#define config__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer config__init_buffer
#endif

#ifdef yy_flush_buffer
#define config__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer config__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define config__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state config__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define config__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer config__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define config_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state config_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define config_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state config_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define config_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack config_ensure_buffer_stack
#endif

#ifdef yylex
#define config_lex_ALREADY_DEFINED
#else
#define yylex config_lex
#endif

#ifdef yyrestart
#define config_restart_ALREADY_DEFINED
#else
#define yyrestart config_restart
#endif

#ifdef yylex_init
#define config_lex_init_ALREADY_DEFINED
#else
#define yylex_init config_lex_init
#endif

#ifdef yylex_init_extra
#define config_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra config_lex_init_extra
#endif

#ifdef yylex_destroy
#define config_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy config_lex_destroy
#endif

#ifdef yyget_debug
#define config_get_debug_ALREADY_DEFINED
#else
#define yyget_debug config_get_debug
#endif

#ifdef yyset_debug
#define config_set_debug_ALREADY_DEFINED
#else
#define yyset_debug config_set_debug
#endif

#ifdef yyget_extra
#define config_get_extra_ALREADY_DEFINED
#else
#define yyget_extra config_get_extra
#endif

#ifdef yyset_extra
#define config_set_extra_ALREADY_DEFINED
#else
#define yyset_extra config_set_extra
#endif

#ifdef yyget_in
#define config_get_in_ALREADY_DEFINED
#else
#define yyget_in config_get_in
#endif

#ifdef yyset_in
#define config_set_in_ALREADY_DEFINED
#else
#define yyset_in config_set_in
#endif

#ifdef yyget_out
#define config_get_out_ALREADY_DEFINED
#else
#define yyget_out config_get_out
#endif

#ifdef yyset_out
#define config_set_out_ALREADY_DEFINED
#else
#define yyset_out config_set_out
#endif

#ifdef yyget_leng
#define config_get_leng_ALREADY_DEFINED
#else
#define yyget_leng config_get_leng
#endif

#ifdef yyget_text
#define config_get_text_ALREADY_DEFINED
#else
#define yyget_text config_get_text
#endif

#ifdef yyget_lineno
#define config_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno config_get_lineno
#endif

#ifdef yyset_lineno
#define config_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno config_set_lineno
#endif

#ifdef yyget_column
#define config_get_column_ALREADY_DEFINED
#else
#define yyget_column config_get_column
#endif

#ifdef yyset_column
#define config_set_column_ALREADY_DEFINED
#else
#define yyset_column config_set_column
#endif

#ifdef yywrap
#define config_wrap_ALREADY_DEFINED
#else
#define yywrap config_wrap
#endif

/* %endif */

#ifdef yyget_lval
#define config_get_lval_ALREADY_DEFINED
#else
#define yyget_lval config_get_lval
#endif

#ifdef yyset_lval
#define config_set_lval_ALREADY_DEFINED
#else
#define yyset_lval config_set_lval
#endif

#ifdef yyalloc
#define config_alloc_ALREADY_DEFINED
#else
#define yyalloc config_alloc
#endif

#ifdef yyrealloc
#define config_realloc_ALREADY_DEFINED
#else
#define yyrealloc config_realloc
#endif

#ifdef yyfree
#define config_free_ALREADY_DEFINED
#else
#define yyfree config_free
#endif

/* %if-c-only */

/* %endif */

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
/* %if-c-only */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/* %endif */

/* %if-tables-serialization */
/* %endif */
/* end standard C headers. */

/* %if-c-or-c++ */
/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* %endif */

/* begin standard C++ headers. */
/* %if-c++-only */
/* %endif */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* %not-for-header */
/* Returned upon end-of-file. */
#define YY_NULL 0
/* %ok-for-header */

/* %not-for-header */
/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))
/* %ok-for-header */

/* %if-reentrant */

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* %endif */

/* %if-not-reentrant */
/* %endif */

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

/* %if-not-reentrant */
/* %endif */

/* %if-c-only */
/* %if-not-reentrant */
/* %endif */
/* %endif */

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
/* %if-c-only */
	FILE *yy_input_file;
/* %endif */

/* %if-c++-only */
/* %endif */

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
/* %if-not-reentrant */
/* %endif */
/* %ok-for-header */

/* %endif */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

/* %if-c-only Standard (non-C++) definition */

/* %if-not-reentrant */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

/* %endif */

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* %% [1.0] yytext/yyin/yyout/yy_state_type/yylineno etc. def's & init go here */
/* Begin user sect3 */

#define config_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP

#define FLEX_DEBUG
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

/* %% [1.5] DFA */

/* %if-c-only Standard (non-C++) definition */

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* %endif */

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
/* %% [2.0] code to fiddle yytext and yyleng for yymore() goes here \ */\
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
/* %% [3.0] code to copy yytext_ptr to yytext[] goes here, if %array \ */\
	yyg->yy_c_buf_p = yy_cp;
/* %% [4.0] data tables for the DFA and the user's section 1 definitions go here */
#define YY_NUM_RULES 65
#define YY_END_OF_BUFFER 66
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[524] =
    {   0,
        0,    0,   66,   64,    5,    5,    1,   64,   64,   64,
        2,   64,   64,   64,   64,   64,   64,   64,   64,   64,
       64,   64,   64,   64,   64,    0,   63,    0,   48,    0,
        0,    0,    2,    3,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    6,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,    4,   62,   62,    2,
        3,   62,   53,   62,   44,   62,   62,   62,   62,   62,
       63,    0,   62,    0,   52,   62,   62,   62,   62,   62,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,

       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
        4,    0,   62,    2,    3,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   48,
       48,   48,   48,   48,    0,   48,   48,   48,   48,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   48,
       48,   48,    4,   62,   62,    3,   62,   42,   45,   62,
        0,   58,   62,   62,   62,   62,   62,   62,   62,   41,
       62,   48,   48,   48,   48,   48,   48,    0,    0,    0,
       48,   48,   48,   48,   48,   48,    0,   48,   48,   48,
        0,   48,   48,   48,    0,    0,   48,   48,    4,    0,

       62,    3,   62,    0,   62,   62,   62,   62,   62,   62,
       50,   59,   51,   62,   48,   48,   48,   48,   48,    0,
       15,    0,    0,    0,   48,   48,   48,    0,    0,   48,
        0,   48,   48,   48,    0,   48,    0,   48,    0,    0,
        0,    0,   48,    4,   61,   62,   62,   62,   62,   56,
       54,   40,   60,   62,   46,   43,   48,   48,   48,   48,
       48,    0,    0,    0,    0,   48,   48,   48,    0,    0,
       48,    0,   48,    0,   48,    0,   48,    0,   48,    0,
        0,    0,    0,   48,   61,   62,   57,   55,   47,    0,
        0,   48,   48,   48,    0,    0,    0,    0,   48,   19,

        0,    0,    0,    0,   48,    0,    0,    0,    7,    0,
        0,    8,    0,   48,    0,    0,   34,    0,    0,   61,
       62,    0,    0,   48,    0,   48,    0,    0,    0,    0,
       48,    0,    0,    0,    0,   48,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   49,    0,
        0,   48,    0,   48,    0,    0,    0,    0,   48,    0,
        0,   38,   37,   48,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   35,    0,    0,    0,    0,
        0,   48,    0,    0,    0,    0,   39,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   29,    0,    0,    0,

        0,   36,    0,    0,    0,    0,   48,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       30,    0,    0,   33,    0,    0,    0,    0,   48,    0,
        0,    0,    0,    0,    0,    0,   23,    0,    0,   26,
        0,    0,    0,   32,    0,    0,    0,    0,   13,    0,
        0,    0,    0,    0,   21,    0,    0,    0,    0,    0,
       31,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   25,    0,    0,    9,   10,   11,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   12,    0,
        0,   17,    0,    0,    0,    0,    0,    0,    0,    0,

       18,    0,    0,    0,   27,   28,    0,    0,    0,    0,
        0,   14,   16,   20,    0,    0,    0,    0,    0,    0,
       22,   24,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    1,    5,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    7,    8,    9,   10,   11,   12,   13,
       14,   15,   16,   17,   11,   11,   11,   18,    1,    1,
       19,    1,   20,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
        1,   47,    1,    1,   48,    1,   49,   50,   51,   52,

       53,   54,   55,   56,   57,   58,   59,   60,   61,   62,
       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[75] =
    {   0,
        1,    1,    1,    1,    2,    1,    1,    2,    2,    1,
        2,    2,    2,    2,    2,    2,    2,    1,    1,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    1,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2
    } ;

static const flex_int16_t yy_base[529] =
    {   0,
        0,  552,  554, 1751, 1751, 1751, 1751,   70,  537,  524,
       67,   74,    0,   57,   52,   59,   60,   57,   64,   74,
      533,   77,   81,   78,  519,  102, 1751,  515,  139,  203,
      139,  216,  229,  236,  249,  251,  257,  262,  279,  264,
      284,  273,  295,  357,  330,  339,  344,  364,  374,  376,
      381,  503, 1751,  426,  359,   69,   79,   88,   75,  287,
       76,  372,  410,   90,   75,   90,  486,  398,  499,  512,
      519,  532,  405,  534,  432,  541,  543,  548,  554,  559,
      561,  618,    0,  603,  569,  626,  636,  644,  650,  668,
      124,  209,  256,  252,  256,  497,  265,  271,  309,  424,

      312,  329,  532,  360,  387,  419,  397,  422,  456,  453,
      674,  706,  719,  732,  744,  757,  763,  704,  768,  773,
      779,  786,  788,  794,  799,  814,  830,  836,  841,  564,
      561,  616,  548,  577,  836,  607,  629,  650,  647,  648,
      677,  481,  690,  713,  722,  467,  754,  758,  764,  466,
      802,  795,  894,  907,  848,  914,  893,  865,  928,  930,
      935,  937,  942,  948,  954,  956,  963,  965,  972,  984,
      990,  795,  826,  825,  838,  826,  312,  826,  847,  836,
      940,  951,  963,  463,  461,  956,  961,  964,  963,  984,
      977,  993,  444,  986,  992,  981,  430,  998, 1046, 1059,

     1072, 1751, 1085, 1087, 1034, 1094, 1103, 1109, 1121, 1114,
     1129, 1135, 1141, 1156,  982, 1003, 1051, 1090, 1095, 1084,
     1751, 1091, 1100, 1120, 1118, 1126, 1125, 1126, 1135, 1137,
     1142, 1147,  426, 1136, 1149, 1139, 1152, 1143, 1159, 1150,
     1163, 1166, 1147, 1751, 1216, 1229, 1231, 1237, 1239, 1244,
     1250, 1252, 1257, 1263, 1265, 1273,  424,  423, 1194, 1201,
     1245, 1246, 1251,  419,  412, 1259, 1241,  410, 1260, 1270,
     1261, 1261,  409, 1256,  390, 1264,  332, 1266, 1262, 1281,
     1283, 1273, 1289,  393, 1331, 1323, 1344, 1346, 1351, 1297,
     1303, 1312,  386, 1317, 1322, 1324, 1329, 1324, 1345,    0,

     1335, 1339, 1329, 1340, 1329, 1351, 1351, 1351, 1751, 1356,
     1344, 1751, 1345,  383, 1351, 1363, 1751, 1349, 1366, 1413,
     1415, 1368, 1382, 1388, 1374, 1379, 1398,  372, 1390, 1408,
     1405, 1405, 1407,  335,  314, 1411, 1402, 1417, 1406, 1405,
     1418, 1419, 1405, 1423, 1441, 1416, 1428, 1425, 1476, 1416,
     1415,  322, 1440, 1446,  317, 1439, 1461, 1447,  297,  307,
     1453, 1751, 1751,  293, 1448, 1462, 1467, 1452, 1471, 1461,
     1460, 1479, 1469, 1478, 1483, 1751, 1460, 1466, 1466, 1482,
     1476, 1476, 1478, 1492, 1492, 1500, 1751, 1488, 1490, 1500,
     1502, 1511, 1509, 1505, 1505, 1524, 1751, 1510, 1521, 1519,

     1507, 1751, 1520, 1531, 1528, 1533, 1526, 1540, 1522, 1538,
     1526, 1540, 1527, 1543,  275, 1544, 1533,  266,  272,  268,
     1751, 1539, 1557, 1751, 1564, 1555, 1566, 1564,  256, 1567,
     1576, 1563, 1571, 1569,  249, 1570, 1751, 1583, 1568, 1751,
     1572, 1573, 1588, 1751, 1579, 1576, 1592, 1577, 1751, 1594,
     1582, 1598, 1602, 1592, 1751, 1593,  253,  236, 1601, 1608,
     1751, 1606, 1604,  220, 1610, 1615, 1622, 1628, 1619, 1630,
     1631, 1622, 1751, 1616, 1617, 1751, 1751, 1751,  217, 1628,
     1646,  207, 1637, 1646, 1647, 1647, 1648, 1649, 1751, 1654,
     1638, 1751,  204, 1656, 1658, 1642,  203,  140, 1658, 1655,

     1751, 1654,  149, 1652, 1751, 1751, 1674,  126,  116, 1668,
     1685, 1751, 1751, 1751, 1686, 1674, 1692, 1676, 1692,  114,
     1751, 1751, 1751, 1744,  117, 1746,  114, 1748
    } ;

static const flex_int16_t yy_def[529] =
    {   0,
      523,    1,  523,  523,  523,  523,  523,  524,  523,  523,
      525,  523,  525,  525,  525,  525,  525,  525,  525,  525,
      525,  525,  525,  525,  526,  524,  523,  524,  523,  523,
      527,  527,  527,  523,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  528,  527,  527,  527,  527,  527,  527,
      527,  526,  523,   29,   54,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,  523,  527,  527,  527,
      523,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  528,   82,  527,  527,  527,  527,  527,  527,  527,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,

       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
      523,  527,  527,  527,  523,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,   54,
       54,   54,   54,   54,  523,   54,   54,   54,   54,   54,
       54,   54,   54,   54,   54,   54,   54,   54,   54,   54,
       54,   54,  523,  527,  527,  523,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,  527,  527,  527,  527,
      527,   54,   54,   54,   54,   54,   54,  523,  523,  523,
       54,   54,   54,   54,   54,   54,  523,   54,   54,   54,
      523,   54,   54,   54,  523,  523,   54,   54,  523,  527,

      527,  523,  527,  527,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,   54,   54,   54,   54,   54,  523,
      523,  523,  523,  523,   54,   54,   54,  523,  523,   54,
      523,   54,   54,   54,  523,   54,  523,   54,  523,  523,
      523,  523,   54,  523,  527,  527,  527,  527,  527,  527,
      527,  527,  527,  527,  527,  527,   54,   54,   54,   54,
       54,  523,  523,  523,  523,   54,   54,   54,  523,  523,
       54,  523,   54,  523,   54,  523,   54,  523,   54,  523,
      523,  523,  523,   54,  527,  527,  527,  527,  527,  523,
      523,   54,   54,   54,  523,  523,  523,  523,   54,   54,

      523,  523,  523,  523,   54,  523,  523,  523,  523,  523,
      523,  523,  523,   54,  523,  523,  523,  523,  523,  527,
      527,  523,  523,   54,  523,   54,  523,  523,  523,  523,
       54,  523,  523,  523,  523,   54,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  527,  523,
      523,   54,  523,   54,  523,  523,  523,  523,   54,  523,
      523,  523,  523,   54,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,   54,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,

      523,  523,  523,  523,  523,  523,   54,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,   54,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,

      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,    0,  523,  523,  523,  523,  523
    } ;

static const flex_int16_t yy_nxt[1826] =
    {   0,
        4,    5,    6,    7,    8,    4,    7,    9,    4,   10,
       11,   11,   11,   11,   11,   11,   11,   12,    7,    4,
       13,   13,   14,   15,   16,   17,   13,   18,   19,   20,
       13,   21,   22,   13,   13,   13,   13,   23,   24,   13,
       13,   13,   13,   13,   13,   13,    4,    4,   13,   13,
       14,   15,   16,   17,   13,   18,   19,   20,   13,   21,
       22,   13,   13,   13,   13,   23,   24,   13,   13,   13,
       13,   13,   13,   13,   27,   32,   37,   33,   33,   33,
       33,   33,   33,   33,   34,   34,   34,   34,   34,   34,
       34,   35,   38,   40,   36,   41,   39,   42,   43,   45,

       46,   49,   51,   93,   37,   50,   27,   94,   95,   96,
      100,   47,  108,  109,  110,   68,   28,   48,   31,   35,
       38,   40,   36,   41,   39,   42,   43,   45,   46,   49,
       51,   93,  522,   50,  514,   94,   95,   96,  100,   47,
      108,  109,  110,   31,  513,   48,   31,   31,   28,   54,
       54,   54,   54,   54,   54,   54,  510,  130,  506,   54,
       55,   56,   57,   54,   54,   54,   58,   59,   54,   54,
       54,   54,   60,   54,   61,   54,   62,   63,   64,   65,
       66,   54,   54,   54,   54,  130,   31,   54,   55,   56,
       57,   54,   54,   54,   58,   59,   54,   54,   54,   54,

       60,   54,   61,   54,   62,   63,   64,   65,   66,   54,
       54,   54,   54,   67,   67,   67,   67,   67,   67,   67,
       31,  505,  501,   31,   31,  492,   69,   69,   69,   69,
       69,   69,   69,   31,  131,  489,   31,   32,  478,   70,
       70,   70,   70,   70,   70,   70,   71,   71,   71,   71,
       71,   71,   71,   31,  473,   31,   31,   31,   31,   31,
      472,   31,  131,   31,   31,   31,   31,  455,   31,   31,
       31,   31,   31,   73,  449,  442,   31,   31,   74,  441,
       31,   31,   72,   31,  440,   75,   31,   31,   31,  132,
      133,   31,   31,  437,  134,   79,   31,  136,   31,   31,

      390,   73,   31,   31,   31,   77,   74,   97,  137,   31,
       72,   31,   78,   75,  388,  387,   76,  132,  133,  220,
       31,   98,  134,   79,  383,  136,   31,   99,   80,  380,
      221,   31,  363,   77,   31,   97,  137,   31,   31,  311,
       78,  138,   31,   31,   76,  141,   31,   31,   31,   98,
      312,   31,   31,  362,   85,   99,   80,   26,   26,   26,
       26,   81,   26,   26,   82,   82,   26,   86,   31,  138,
      142,   31,   31,  141,   26,   26,   26,   84,   31,  356,
       31,   31,   31,   31,   31,   31,   31,   91,   31,   31,
      344,   31,  101,  325,  102,   86,  103,  145,  142,   92,

      319,   87,   31,   28,   82,   31,   31,   88,  309,   31,
      146,   31,   31,   31,   89,   91,  307,  301,   90,  298,
      101,   31,  102,   31,  103,  145,  297,   92,   31,   87,
      291,  290,  149,  274,  104,   88,   31,  242,  146,   31,
       31,  147,   89,  105,  106,   31,   90,   54,   54,   54,
      107,  237,   31,   54,   54,  139,  148,  150,  140,   54,
      149,   54,  104,   54,   54,   54,   54,   54,  229,  147,
      228,  105,  106,  195,  191,   54,   54,   54,  107,   31,
      151,   54,   54,  139,  148,  150,  140,   54,  187,   54,
      152,   54,   54,   54,   54,   54,  111,  111,  111,  111,

      111,  111,  111,   31,  135,   53,   31,  112,  151,  113,
      113,  113,  113,  113,  113,  113,   31,  523,  152,   31,
       32,   53,  114,  114,  114,  114,  114,  114,  114,  115,
      115,  115,  115,  115,  115,  115,   31,   44,   31,   31,
       31,   31,   31,   30,   29,   31,   31,   31,   31,   31,
       31,   31,   31,  523,  119,   31,   31,   25,   31,   31,
      523,   31,   31,   31,  143,   31,   31,   31,   31,   31,
      116,  144,  120,   31,  117,  118,   31,   31,  523,   31,
      523,   31,  523,  523,  172,  121,  173,  176,   31,  122,
       31,  523,  143,  523,  523,   31,  523,  523,  116,  144,

      120,   31,  117,  118,  177,  523,   31,   31,   31,  523,
       31,   31,  172,  121,  173,  176,   31,  122,   26,   26,
       26,   26,   81,   26,   26,   82,   82,   26,  123,  523,
       31,  181,  177,   31,   31,   26,   26,   26,  523,  523,
       31,  174,  124,   31,   31,  523,  523,  523,   31,  175,
       31,   31,   31,  182,   31,  523,  123,   31,   31,  181,
      523,  523,  523,  523,   28,   82,  125,  127,  126,  174,
      124,  183,   31,   31,  128,   31,   31,  175,  184,  185,
      523,  182,  523,   31,  153,  153,  153,  153,  153,  153,
      153,   31,  523,  523,  125,  127,  126,   31,  523,  183,

      186,  523,  128,  523,  523,  523,  184,  185,   31,  129,
       31,   31,   31,   31,   31,   31,  154,  154,  154,  154,
      154,  154,  154,   31,  188,  523,   31,  112,  186,  155,
      155,  155,  155,  155,  155,  155,   31,  129,  523,   31,
       31,  159,  114,  114,  114,  114,  114,  114,  114,  523,
      189,   31,  188,   31,  156,  156,  156,  156,  156,  156,
      156,   31,  523,  190,   31,   31,   31,   31,  523,  159,
       31,   31,   31,  523,  523,   31,   31,   31,  189,   31,
       31,   31,  523,   31,  192,  157,   31,   31,  160,  158,
       31,  190,   31,   31,   31,   31,   31,  193,   31,  194,

      162,   31,   31,   31,   31,  523,   31,   31,  165,  196,
       31,  523,  192,  157,  164,  161,  160,  158,   31,  163,
       31,   31,   31,  198,  523,  193,   31,  194,  162,  523,
      167,  166,  215,   31,   31,   31,  165,   31,   31,  197,
       31,   31,  164,   31,   31,   31,   31,  163,   31,   31,
      216,  198,   31,  217,  168,   31,  112,  178,  167,  166,
      215,   31,  218,  219,  169,  171,  179,  197,  180,   31,
      222,  223,   31,   31,  224,  170,  523,   31,  216,  523,
      523,  217,  168,   31,  523,  178,  523,  523,   31,  523,
      218,  219,  169,  171,  179,   31,  180,   31,  222,  223,

       31,   31,  224,  170,  199,  199,  199,  199,  199,  199,
      199,   31,   31,  523,   31,  200,  523,  201,  201,  201,
      201,  201,  201,  201,  202,  202,  202,  202,  202,  202,
      202,  203,   31,  523,   31,   31,   31,   31,   31,   31,
       31,   31,   31,   31,   31,   31,   31,  523,  205,   31,
       31,  206,   31,  523,   31,   31,   31,  523,   31,  203,
       31,   31,   31,   31,   31,  207,  523,   31,  523,   31,
       31,   31,   31,   31,  523,   31,   31,  204,  225,   31,
       31,  208,   31,  211,   31,  209,  226,  227,   31,   31,
      230,   31,   31,  207,   31,   31,  210,   31,   31,  523,

      231,   31,  212,   31,  213,  232,  225,  233,  234,  208,
       31,  211,   31,  209,  226,  227,  235,  236,  230,   31,
      238,  241,  239,  243,  210,  240,  257,  214,  231,  523,
      212,   31,  213,  232,  523,  233,  234,   31,   31,  523,
      258,   31,   31,  523,  235,  236,  250,  523,  238,  241,
      239,  243,  523,  240,  257,  214,  244,  244,  244,  244,
      244,  244,  244,   31,  523,  523,   31,   31,  258,  245,
      245,  245,  245,  245,  245,  245,   31,  259,  523,   31,
      200,   31,  246,  246,  246,  246,  246,  246,  246,   31,
      523,   31,   31,   31,   31,   31,  523,  523,   31,  523,

      248,   31,   31,  249,  523,  259,   31,   31,  251,  523,
       31,   31,  260,   31,  523,  523,   31,   31,   31,   31,
      523,   31,   31,  261,  247,   31,  262,  252,   31,   31,
      263,  523,   31,   31,   31,  523,   31,   31,  255,   31,
      260,   31,   31,   31,  264,   31,  265,  253,   31,   31,
       31,  261,  247,  266,  262,  252,   31,  267,  263,  254,
       31,   31,  268,   31,   31,  269,  255,  270,   31,  271,
      272,  273,  264,  275,  265,  253,   31,  276,  277,  278,
      279,  266,   31,  280,  281,  267,  282,  254,   31,  283,
      268,  284,  523,  269,  256,  270,  523,  271,  272,  273,

      523,  275,  523,   31,  523,  276,  277,  278,  279,  523,
      523,  280,  281,  523,  282,  523,  523,  283,  523,  284,
       31,  523,  256,   31,   31,  523,  285,  285,  285,  285,
      285,  285,  285,   31,  292,   31,   31,  200,   31,   31,
      293,   31,  523,   31,   31,   31,   31,   31,   31,  287,
      523,   31,   31,  288,   31,  286,   31,   31,   31,   31,
       31,   31,  292,   31,   31,   31,  294,   31,  293,   31,
       31,   31,   31,   31,  295,  296,   31,   31,   31,  299,
       31,   31,  523,  286,   31,  300,   31,  289,  302,  305,
      303,   31,  523,  306,  294,  308,  310,   31,  304,   31,

      313,  314,  295,  296,   31,  315,  316,  299,  317,  318,
       31,  523,   31,  300,  523,  289,  302,  305,  303,  523,
       31,  306,  523,  308,  310,  523,  304,   31,  313,  314,
       31,   31,  322,  315,  316,   31,  317,  318,   31,   31,
      323,  320,  320,  320,  320,  320,  320,  320,   31,  324,
       31,   31,   31,   31,   31,   31,  321,  326,   31,   31,
      322,  327,  328,  523,  329,  523,  330,  331,  323,  332,
       31,  333,  334,  335,  336,  337,  338,  324,   31,  339,
      340,  341,  342,  343,  321,  326,  345,  346,  347,  327,
      328,   31,  329,   31,  330,  331,  348,  332,   31,  333,

      334,  335,  336,  337,  338,  350,  351,  339,  340,  341,
      342,  343,  352,  353,  345,  346,  347,   31,  354,   31,
       31,   31,   31,   31,  348,  355,  523,  357,  358,  359,
      360,  361,  523,  350,  351,  364,  365,  366,  367,  368,
      352,  353,  369,  370,  371,  372,  354,  375,  376,  377,
      378,  379,  523,  355,  349,  357,  358,  359,  360,  361,
       31,  373,   31,  364,  365,  366,  367,  368,  381,  374,
      369,  370,  371,  372,  382,  375,  376,  377,  378,  379,
       31,  384,  349,   31,   31,  385,  386,  389,  391,  373,
      392,  393,  394,  395,  396,  523,  381,  374,  397,  398,

      399,  400,  382,  401,  402,  403,  404,  405,  406,  384,
      407,  408,  409,  385,  386,  389,  391,  410,  392,  393,
      394,  395,  396,   31,  411,  412,  397,  398,  399,  400,
      413,  401,  402,  403,  404,  405,  406,  414,  407,  408,
      409,  415,  416,  417,  418,  410,  419,  420,  421,  422,
      423,  424,  411,  412,  425,  426,  427,  428,  413,  429,
      430,  431,  432,  433,  434,  414,  435,  436,  438,  415,
      416,  417,  418,  439,  419,  420,  421,  422,  423,  424,
      443,  444,  425,  426,  427,  428,  445,  429,  430,  431,
      432,  433,  434,  446,  435,  436,  438,  447,  448,  450,

      451,  439,  452,  453,  454,  456,  457,  458,  443,  444,
      459,  460,  461,  462,  445,  463,  464,  465,  466,  467,
      468,  446,  469,  470,  471,  447,  448,  450,  451,  474,
      452,  453,  454,  456,  457,  458,  475,  476,  459,  460,
      461,  462,  477,  463,  464,  465,  466,  467,  468,  479,
      469,  470,  471,  480,  481,  482,  483,  474,  484,  485,
      486,  487,  488,  490,  475,  476,  491,  493,  494,  495,
      477,  496,  497,  498,  499,  500,  502,  479,  503,  504,
      507,  480,  481,  482,  483,  508,  484,  485,  486,  487,
      488,  490,  509,  511,  491,  493,  494,  495,  512,  496,

      497,  498,  499,  500,  502,  515,  503,  504,  507,  516,
      517,  518,  519,  508,  520,  521,  523,  523,  523,  523,
      509,  511,  523,  523,  523,  523,  512,  523,  523,  523,
      523,  523,  523,  515,  523,  523,  523,  516,  517,  518,
      519,  523,  520,  521,   26,   26,   52,   52,   83,   83,
        3,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,

      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523
    } ;

static const flex_int16_t yy_chk[1826] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    8,   11,   15,   11,   11,   11,
       11,   11,   11,   11,   12,   12,   12,   12,   12,   12,
       12,   14,   16,   17,   14,   18,   16,   19,   20,   22,

       22,   23,   24,   56,   15,   23,   26,   57,   58,   59,
       61,   22,   64,   65,   66,  527,    8,   22,  525,   14,
       16,   17,   14,   18,   16,   19,   20,   22,   22,   23,
       24,   56,  520,   23,  509,   57,   58,   59,   61,   22,
       64,   65,   66,   31,  508,   22,   31,   31,   26,   29,
       29,   29,   29,   29,   29,   29,  503,   91,  498,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   29,   29,   91,   31,   29,   29,   29,
       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,

       29,   29,   29,   29,   29,   29,   29,   29,   29,   29,
       29,   29,   29,   30,   30,   30,   30,   30,   30,   30,
       32,  497,  493,   32,   32,  482,   32,   32,   32,   32,
       32,   32,   32,   33,   92,  479,   33,   33,  464,   33,
       33,   33,   33,   33,   33,   33,   34,   34,   34,   34,
       34,   34,   34,   35,  458,   36,   35,   35,   36,   36,
      457,   37,   92,   32,   37,   37,   38,  435,   40,   38,
       38,   40,   40,   36,  429,  420,   33,   42,   37,  419,
       42,   42,   35,   39,  418,   38,   39,   39,   41,   93,
       94,   41,   41,  415,   95,   42,   35,   97,   36,   43,

      364,   36,   43,   43,   37,   40,   37,   60,   98,   38,
       35,   40,   41,   38,  360,  359,   39,   93,   94,  177,
       42,   60,   95,   42,  355,   97,   39,   60,   43,  352,
      177,   41,  335,   40,   45,   60,   98,   45,   45,  277,
       41,   99,   43,   46,   39,  101,   46,   46,   47,   60,
      277,   47,   47,  334,   46,   60,   43,   44,   44,   44,
       44,   44,   44,   44,   44,   44,   44,   47,   48,   99,
      102,   48,   48,  101,   44,   44,   44,   45,   49,  328,
       50,   49,   49,   50,   50,   51,   46,   55,   51,   51,
      314,   47,   62,  293,   62,   47,   62,  104,  102,   55,

      284,   48,   68,   44,   44,   68,   68,   49,  275,   73,
      105,   48,   73,   73,   50,   55,  273,  268,   51,  265,
       62,   49,   62,   50,   62,  104,  264,   55,   51,   48,
      258,  257,  107,  233,   63,   49,   75,  197,  105,   75,
       75,  106,   50,   63,   63,   68,   51,   54,   54,   54,
       63,  193,   73,   54,   54,  100,  106,  108,  100,   54,
      107,   54,   63,   54,   54,   54,   54,   54,  185,  106,
      184,   63,   63,  150,  146,   54,   54,   54,   63,   75,
      109,   54,   54,  100,  106,  108,  100,   54,  142,   54,
      110,   54,   54,   54,   54,   54,   67,   67,   67,   67,

       67,   67,   67,   69,   96,   52,   69,   69,  109,   69,
       69,   69,   69,   69,   69,   69,   70,   28,  110,   70,
       70,   25,   70,   70,   70,   70,   70,   70,   70,   71,
       71,   71,   71,   71,   71,   71,   72,   21,   74,   72,
       72,   74,   74,   10,    9,   76,   69,   77,   76,   76,
       77,   77,   78,    3,   77,   78,   78,    2,   79,   70,
        0,   79,   79,   80,  103,   81,   80,   80,   81,   81,
       72,  103,   78,   85,   74,   76,   85,   85,    0,   72,
        0,   74,    0,    0,  130,   79,  131,  133,   76,   80,
       77,    0,  103,    0,    0,   78,    0,    0,   72,  103,

       78,   79,   74,   76,  134,    0,   80,   84,   81,    0,
       84,   84,  130,   79,  131,  133,   85,   80,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   84,    0,
       86,  136,  134,   86,   86,   82,   82,   82,    0,    0,
       87,  132,   84,   87,   87,    0,    0,    0,   88,  132,
       84,   88,   88,  137,   89,    0,   84,   89,   89,  136,
        0,    0,    0,    0,   82,   82,   86,   88,   87,  132,
       84,  138,   90,   86,   89,   90,   90,  132,  139,  140,
        0,  137,    0,   87,  111,  111,  111,  111,  111,  111,
      111,   88,    0,    0,   86,   88,   87,   89,    0,  138,

      141,    0,   89,    0,    0,    0,  139,  140,  118,   90,
      112,  118,  118,  112,  112,   90,  112,  112,  112,  112,
      112,  112,  112,  113,  143,    0,  113,  113,  141,  113,
      113,  113,  113,  113,  113,  113,  114,   90,    0,  114,
      114,  118,  114,  114,  114,  114,  114,  114,  114,    0,
      144,  118,  143,  112,  115,  115,  115,  115,  115,  115,
      115,  116,    0,  145,  116,  116,  113,  117,    0,  118,
      117,  117,  119,    0,    0,  119,  119,  120,  144,  114,
      120,  120,    0,  121,  147,  116,  121,  121,  119,  117,
      122,  145,  123,  122,  122,  123,  123,  148,  124,  149,

      120,  124,  124,  125,  116,    0,  125,  125,  123,  151,
      117,    0,  147,  116,  122,  119,  119,  117,  126,  121,
      120,  126,  126,  152,    0,  148,  121,  149,  120,    0,
      125,  124,  172,  122,  127,  123,  123,  127,  127,  151,
      128,  124,  122,  128,  128,  129,  125,  121,  129,  129,
      173,  152,  155,  174,  126,  155,  155,  135,  125,  124,
      172,  126,  175,  176,  127,  129,  135,  151,  135,  158,
      178,  179,  158,  158,  180,  128,    0,  127,  173,    0,
        0,  174,  126,  128,    0,  135,    0,    0,  129,    0,
      175,  176,  127,  129,  135,  155,  135,  157,  178,  179,

      157,  157,  180,  128,  153,  153,  153,  153,  153,  153,
      153,  154,  158,    0,  154,  154,    0,  154,  154,  154,
      154,  154,  154,  154,  156,  156,  156,  156,  156,  156,
      156,  157,  159,    0,  160,  159,  159,  160,  160,  161,
      157,  162,  161,  161,  162,  162,  163,    0,  161,  163,
      163,  161,  164,    0,  154,  164,  164,    0,  165,  157,
      166,  165,  165,  166,  166,  163,    0,  167,    0,  168,
      167,  167,  168,  168,    0,  159,  169,  160,  181,  169,
      169,  164,  161,  167,  162,  165,  182,  183,  170,  163,
      186,  170,  170,  163,  171,  164,  166,  171,  171,    0,

      187,  165,  168,  166,  169,  188,  181,  189,  190,  164,
      167,  167,  168,  165,  182,  183,  191,  192,  186,  169,
      194,  196,  195,  198,  166,  195,  215,  171,  187,    0,
      168,  170,  169,  188,    0,  189,  190,  171,  205,    0,
      216,  205,  205,    0,  191,  192,  205,    0,  194,  196,
      195,  198,    0,  195,  215,  171,  199,  199,  199,  199,
      199,  199,  199,  200,    0,    0,  200,  200,  216,  200,
      200,  200,  200,  200,  200,  200,  201,  217,    0,  201,
      201,  205,  201,  201,  201,  201,  201,  201,  201,  203,
        0,  204,  203,  203,  204,  204,    0,    0,  206,    0,

      204,  206,  206,  204,    0,  217,  200,  207,  206,    0,
      207,  207,  218,  208,    0,    0,  208,  208,  210,  201,
        0,  210,  210,  219,  203,  209,  220,  207,  209,  209,
      222,    0,  203,  211,  204,    0,  211,  211,  210,  212,
      218,  206,  212,  212,  223,  213,  224,  208,  213,  213,
      207,  219,  203,  225,  220,  207,  208,  226,  222,  209,
      214,  210,  227,  214,  214,  228,  210,  229,  209,  230,
      231,  232,  223,  234,  224,  208,  211,  235,  236,  237,
      238,  225,  212,  239,  240,  226,  241,  209,  213,  242,
      227,  243,    0,  228,  214,  229,    0,  230,  231,  232,

        0,  234,    0,  214,    0,  235,  236,  237,  238,    0,
        0,  239,  240,    0,  241,    0,    0,  242,    0,  243,
      245,    0,  214,  245,  245,    0,  245,  245,  245,  245,
      245,  245,  245,  246,  259,  247,  246,  246,  247,  247,
      260,  248,    0,  249,  248,  248,  249,  249,  250,  248,
        0,  250,  250,  249,  251,  247,  252,  251,  251,  252,
      252,  253,  259,  245,  253,  253,  261,  254,  260,  255,
      254,  254,  255,  255,  262,  263,  246,  256,  247,  266,
      256,  256,    0,  247,  248,  267,  249,  254,  269,  271,
      270,  250,    0,  272,  261,  274,  276,  251,  270,  252,

      278,  279,  262,  263,  253,  280,  281,  266,  282,  283,
      254,    0,  255,  267,    0,  254,  269,  271,  270,    0,
      256,  272,    0,  274,  276,    0,  270,  286,  278,  279,
      286,  286,  290,  280,  281,  285,  282,  283,  285,  285,
      291,  285,  285,  285,  285,  285,  285,  285,  287,  292,
      288,  287,  287,  288,  288,  289,  286,  294,  289,  289,
      290,  295,  296,    0,  297,    0,  298,  299,  291,  301,
      286,  302,  303,  304,  305,  306,  307,  292,  285,  308,
      310,  311,  311,  313,  286,  294,  315,  316,  318,  295,
      296,  287,  297,  288,  298,  299,  319,  301,  289,  302,

      303,  304,  305,  306,  307,  322,  323,  308,  310,  311,
      311,  313,  324,  325,  315,  316,  318,  320,  326,  321,
      320,  320,  321,  321,  319,  327,    0,  329,  330,  331,
      332,  333,    0,  322,  323,  336,  337,  338,  339,  340,
      324,  325,  341,  342,  343,  344,  326,  346,  347,  348,
      350,  351,    0,  327,  321,  329,  330,  331,  332,  333,
      320,  345,  321,  336,  337,  338,  339,  340,  353,  345,
      341,  342,  343,  344,  354,  346,  347,  348,  350,  351,
      349,  356,  321,  349,  349,  357,  358,  361,  365,  345,
      366,  367,  368,  369,  370,    0,  353,  345,  371,  372,

      373,  374,  354,  375,  377,  378,  379,  380,  381,  356,
      382,  383,  384,  357,  358,  361,  365,  385,  366,  367,
      368,  369,  370,  349,  386,  388,  371,  372,  373,  374,
      389,  375,  377,  378,  379,  380,  381,  390,  382,  383,
      384,  391,  392,  393,  394,  385,  395,  396,  398,  399,
      400,  401,  386,  388,  403,  404,  405,  406,  389,  407,
      408,  409,  410,  411,  412,  390,  413,  414,  416,  391,
      392,  393,  394,  417,  395,  396,  398,  399,  400,  401,
      422,  423,  403,  404,  405,  406,  425,  407,  408,  409,
      410,  411,  412,  426,  413,  414,  416,  427,  428,  430,

      431,  417,  432,  433,  434,  436,  438,  439,  422,  423,
      441,  442,  443,  445,  425,  446,  447,  448,  450,  451,
      452,  426,  453,  454,  456,  427,  428,  430,  431,  459,
      432,  433,  434,  436,  438,  439,  460,  462,  441,  442,
      443,  445,  463,  446,  447,  448,  450,  451,  452,  465,
      453,  454,  456,  466,  467,  468,  469,  459,  470,  471,
      472,  474,  475,  480,  460,  462,  481,  483,  484,  485,
      463,  486,  487,  488,  490,  491,  494,  465,  495,  496,
      499,  466,  467,  468,  469,  500,  470,  471,  472,  474,
      475,  480,  502,  504,  481,  483,  484,  485,  507,  486,

      487,  488,  490,  491,  494,  510,  495,  496,  499,  511,
      515,  516,  517,  500,  518,  519,    0,    0,    0,    0,
      502,  504,    0,    0,    0,    0,  507,    0,    0,    0,
        0,    0,    0,  510,    0,    0,    0,  511,  515,  516,
      517,    0,  518,  519,  524,  524,  526,  526,  528,  528,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,

      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523,  523,  523,  523,  523,  523,
      523,  523,  523,  523,  523
    } ;

static const flex_int16_t yy_rule_linenum[65] =
    {   0,
       81,   83,   85,   87,   89,   92,   96,   98,  100,  101,
      102,  103,  104,  105,  106,  107,  108,  109,  110,  111,
      112,  113,  114,  115,  116,  117,  118,  119,  120,  121,
      122,  123,  124,  125,  126,  127,  129,  130,  132,  134,
      135,  136,  137,  138,  139,  141,  142,  145,  150,  151,
      152,  154,  155,  156,  157,  158,  159,  160,  161,  162,
      164,  173,  191,  198
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "libmemcached/csl/scanner.l"
/*  vim:expandtab:shiftwidth=2:tabstop=2:smarttab:
 *
 *  Configure Scripting Language
 *
 *  Copyright (C) 2011 DataDifferental, http://datadifferential.com
 *
 *  This program is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU Affero General Public License as
 *  published by the Free Software Foundation, either version 3 of the
 *  License, or (at your option) any later version.
 *
 *  This program is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU Affero General Public License for more details.
 *
 *  You should have received a copy of the GNU Affero General Public License
 *  along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#line 42 "libmemcached/csl/scanner.l"
#include <cstdlib>
#include <cstring>

#define PARAM yyget_extra(yyscanner)

#define get_lex_chars(buffer, result, max_size, context) \
{ \
  if (context->pos >= context->length) \
  { \
    result= YY_NULL; \
  } \
  else \
  { \
    result= (int)(context->length - context->pos); \
    (size_t)result > (size_t)max_size ? result= max_size : 0; \
    memcpy(buffer, context->buf + context->pos, result); \
    context->pos += result; \
  } \
}


#define YY_INPUT(buffer, result, max_size) get_lex_chars(buffer, result, max_size, PARAM)

#line 1371 "libmemcached/csl/scanner.cc"
#line 1372 "libmemcached/csl/scanner.cc"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
/* %if-c-only */
#include <unistd.h>
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* %if-c-only Reentrant structure and macros (non-C++). */
/* %if-reentrant */

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    }; /* end struct yyguts_t */

/* %if-c-only */

static int yy_init_globals ( yyscan_t yyscanner );

/* %endif */

/* %if-reentrant */

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r

int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* %endif */

/* %endif End reentrant structures and macros. */

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

/* %if-bison-bridge */

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

/* %endif */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

/* %not-for-header */
#ifndef YY_NO_UNPUT

#endif
/* %ok-for-header */

/* %endif */

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
/* %if-c-only Standard (non-C++) definition */
/* %not-for-header */
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif
/* %ok-for-header */

/* %endif */
#endif

/* %if-c-only */

/* %endif */

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* %if-c-only Standard (non-C++) definition */
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
/* %% [5.0] fread()/read() definition of YY_INPUT goes here unless we're doing C++ \ */\
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\
/* %if-c++-only C++ definition \ */\
/* %endif */

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
/* %if-c-only */
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
#endif

/* %if-tables-serialization structures and prototypes */
/* %not-for-header */
/* %ok-for-header */

/* %not-for-header */
/* %tables-yydmap generated elements */
/* %endif */
/* end tables serialization structures and prototypes */

/* %ok-for-header */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
/* %if-c-only Standard (non-C++) definition */

extern int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only C++ definition */
/* %endif */
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

/* %% [6.0] YY_RULE_SETUP definition goes here */
#define YY_RULE_SETUP \
	if ( yyleng > 0 ) \
		YY_CURRENT_BUFFER_LVALUE->yy_at_bol = \
				(yytext[yyleng - 1] == '\n'); \
	YY_USER_ACTION

/* %not-for-header */
/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
/* %if-c-only */
			yyin = stdin;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! yyout )
/* %if-c-only */
			yyout = stdout;
/* %endif */
/* %if-c++-only */
/* %endif */

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
/* %% [7.0] user's declarations go here */
#line 78 "libmemcached/csl/scanner.l"



#line 1719 "libmemcached/csl/scanner.cc"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
/* %% [8.0] yymore()-related code goes here */
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

/* %% [9.0] code to set up and find next match goes here */
		yy_current_state = yyg->yy_start;
		yy_current_state += YY_AT_BOL();
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 524 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 1751 );

yy_find_action:
/* %% [10.0] code to find the action number goes here */
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

/* %% [11.0] code for yylineno update goes here */

do_action:	/* This label is used only to access EOF actions. */

/* %% [12.0] debug code goes here */
		if ( yy_flex_debug )
			{
			if ( yy_act == 0 )
				fprintf( stderr, "--scanner backing up\n" );
			else if ( yy_act < 65 )
				fprintf( stderr, "--accepting rule at line %ld (\"%s\")\n",
				         (long)yy_rule_linenum[yy_act], yytext );
			else if ( yy_act == 65 )
				fprintf( stderr, "--accepting default rule (\"%s\")\n",
				         yytext );
			else if ( yy_act == 66 )
				fprintf( stderr, "--(end of buffer or a NUL)\n" );
			else
				fprintf( stderr, "--EOF (start condition %d)\n", YY_START );
			}

		switch ( yy_act )
	{ /* beginning of action switch */
/* %% [13.0] actions go here */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 81 "libmemcached/csl/scanner.l"
{ return yytext[0];}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 83 "libmemcached/csl/scanner.l"
{ yylval->number= atoi(yytext); return (NUMBER); }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 85 "libmemcached/csl/scanner.l"
{ yylval->number= atoi(yytext +1); return PORT; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 87 "libmemcached/csl/scanner.l"
{ yylval->number= atoi(yytext +2); return WEIGHT_START; }
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 89 "libmemcached/csl/scanner.l"
; /* skip whitespace */
	YY_BREAK
case 6:
*yy_cp = yyg->yy_hold_char; /* undo effects of setting up yytext */
yyg->yy_c_buf_p = yy_cp -= 1;
YY_DO_BEFORE_ACTION; /* set up yytext again */
YY_RULE_SETUP
#line 92 "libmemcached/csl/scanner.l"
{
      return COMMENT;
    }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 96 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; yyextra->set_server(); return yyextra->previous_token= SERVER; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 98 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SOCKET; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 100 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= BINARY_PROTOCOL; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 101 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= BUFFER_REQUESTS; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 102 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= CONFIGURE_FILE; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 103 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= CONNECT_TIMEOUT; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 104 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= DISTRIBUTION; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 105 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= HASH_WITH_NAMESPACE; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 106 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= HASH; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 107 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= IO_BYTES_WATERMARK; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 108 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= IO_KEY_PREFETCH; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 109 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= IO_MSG_WATERMARK; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 110 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= NOREPLY; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 111 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= NUMBER_OF_REPLICAS; }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 112 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= POLL_TIMEOUT; }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 113 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= RANDOMIZE_REPLICA_READ; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 114 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= RCV_TIMEOUT; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 115 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= REMOVE_FAILED_SERVERS; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 116 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= RETRY_TIMEOUT; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 117 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SND_TIMEOUT; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 118 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SOCKET_RECV_SIZE; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 119 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SOCKET_SEND_SIZE; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 120 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SORT_HOSTS; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 121 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SUPPORT_CAS; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 122 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= _TCP_KEEPALIVE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 123 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= _TCP_KEEPIDLE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 124 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= _TCP_NODELAY; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 125 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= USE_UDP; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 126 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= USER_DATA; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 127 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= VERIFY_KEY; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 129 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= POOL_MIN; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 130 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= POOL_MAX; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 132 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= NAMESPACE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 134 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= INCLUDE; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 135 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= RESET; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 136 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= PARSER_DEBUG; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 137 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= SERVERS; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 138 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= END; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 139 "libmemcached/csl/scanner.l"
{ yyextra->begin= yytext; return yyextra->previous_token= ERROR; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 141 "libmemcached/csl/scanner.l"
{ return yyextra->previous_token= MC_TRUE; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 142 "libmemcached/csl/scanner.l"
{ return yyextra->previous_token= MC_FALSE; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 145 "libmemcached/csl/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN_OPTION;
    }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 150 "libmemcached/csl/scanner.l"
{ return CONSISTENT; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 151 "libmemcached/csl/scanner.l"
{ return MODULA; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 152 "libmemcached/csl/scanner.l"
{ return RANDOM; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 154 "libmemcached/csl/scanner.l"
{ return MD5; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 155 "libmemcached/csl/scanner.l"
{ return CRC; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 156 "libmemcached/csl/scanner.l"
{ return FNV1_64; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 157 "libmemcached/csl/scanner.l"
{ return FNV1A_64; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 158 "libmemcached/csl/scanner.l"
{ return FNV1_32; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 159 "libmemcached/csl/scanner.l"
{ return FNV1A_32; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 160 "libmemcached/csl/scanner.l"
{ return HSIEH; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 161 "libmemcached/csl/scanner.l"
{ return MURMUR; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 162 "libmemcached/csl/scanner.l"
{ return JENKINS; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 164 "libmemcached/csl/scanner.l"
{
      yylval->server.port= MEMCACHED_DEFAULT_PORT;
      yylval->server.weight= 1;
      yylval->server.c_str= yyextra->set_hostname(yytext, yyleng);
      if (yylval->server.c_str)
        yylval->server.size= yyleng;
      return IPADDRESS;
    }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 173 "libmemcached/csl/scanner.l"
{
      if (yyextra->is_server())
      {
        yylval->server.port= MEMCACHED_DEFAULT_PORT;
        yylval->server.weight= 1;
        yylval->server.c_str= yyextra->set_hostname(yytext, yyleng);
        if (yylval->server.c_str)
          yylval->server.size= yyleng;

        return HOSTNAME;
      }

      yylval->string.c_str = yytext;
      yylval->string.size = yyleng;

      return STRING;
    }
	YY_BREAK
case 63:
/* rule 63 can match eol */
YY_RULE_SETUP
#line 191 "libmemcached/csl/scanner.l"
{
      yyget_text(yyscanner)[yyleng -1]= 0;
      yylval->string.c_str= yytext +1;
      yylval->string.size= yyleng -2;
      return QUOTED_STRING;
    }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 198 "libmemcached/csl/scanner.l"
{
      yyextra->begin= yytext;
      return UNKNOWN;
    }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 203 "libmemcached/csl/scanner.l"
ECHO;
	YY_BREAK
#line 2166 "libmemcached/csl/scanner.cc"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
/* %if-c-only */
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
/* %endif */
/* %if-c++-only */
/* %endif */
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
/* %% [14.0] code to do back-up for compressed tables and set up yy_cp goes here */
				yy_cp = yyg->yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */
/* %ok-for-header */

/* %if-c++-only */
/* %not-for-header */
/* %ok-for-header */

/* %endif */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
/* %if-c-only */
static int yy_get_next_buffer (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

/* %if-c-only */
/* %not-for-header */
    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

/* %% [15.0] code to get the start state into yy_current_state goes here */
	yy_current_state = yyg->yy_start;
	yy_current_state += YY_AT_BOL();

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
/* %% [16.0] code to find the next state goes here */
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 524 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
/* %if-c-only */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
/* %% [17.0] code to find the next state, and perhaps do backing up, goes here */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 524 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 523);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT
/* %if-c-only */

/* %endif */
#endif

/* %if-c-only */
#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

/* %endif */
/* %if-c++-only */
/* %endif */
{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

/* %% [19.0] update BOL and yylineno */
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = (c == '\n');

	return c;
}
/* %if-c-only */
#endif	/* ifndef YY_NO_INPUT */
/* %endif */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
/* %if-c-only */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/* %if-c++-only */
/* %endif */

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/* %if-c-only */
static void yy_load_buffer_state  (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
/* %if-c-only */
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
/* %endif */
/* %if-c++-only */
/* %endif */
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
/* %if-c-only */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/* %if-c++-only */
/* %endif */

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
/* %if-c-only */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

/* %if-c-only */
	b->yy_input_file = file;
/* %endif */
/* %if-c++-only */
/* %endif */
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

/* %if-c-only */

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;

/* %endif */
/* %if-c++-only */
/* %endif */
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
/* %if-c-only */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/* %if-c-or-c++ */
/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}
/* %endif */

/* %if-c-or-c++ */
/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
/* %if-c-only */
void yypop_buffer_state (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}
/* %endif */

/* %if-c-or-c++ */
/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
/* %if-c-only */
static void yyensure_buffer_stack (yyscan_t yyscanner)
/* %endif */
/* %if-c++-only */
/* %endif */
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{

	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}
/* %endif */

/* %if-c-only */
/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}
/* %endif */

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

/* %if-c-only */
static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}
/* %endif */
/* %if-c++-only */
/* %endif */

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/* %if-c-only */
/* %if-reentrant */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/* %endif */

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;

    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;

    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/* %if-reentrant */

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/* %endif */

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );

    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );

    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* %endif */

/* %if-reentrant */
/* Accessor methods for yylval and yylloc */

/* %if-bison-bridge */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

/* %endif */

/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

/* %endif if-c-only */

/* %if-c-only */
static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}
/* %endif */

/* %if-c-only SNIP! this currently causes conflicts with the c++ scanner */
/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

/* %if-reentrant */
    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
/* %endif */
    return 0;
}
/* %endif */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

/* %if-tables-serialization definitions */
/* %define-yytables   The name for this specific scanner's tables. */
#define YYTABLES_NAME "yytables"
/* %endif */

/* %ok-for-header */

#line 203 "libmemcached/csl/scanner.l"


void Context::init_scanner()
{
  yylex_init(&scanner);
  yyset_extra(this, scanner);
}

void Context::destroy_scanner()
{
  yylex_destroy(scanner);
}


